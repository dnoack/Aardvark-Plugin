

- Nachrichten zwischen plugin und rsd definieren
- wie sollen plugin funktionen in rsd registriert sein ? z.b. wenn client frägt : welche funktionen stehen zur verfügung
- Zentrale liste von Plugins in RSD
- Tcp worker braucht jsonRPC parser und zugang zur zentralen liste der registrierten plugins
- wenn eine anfrage zu vorhandenem plugin -> UdsComClient zu plugin



- Listener brauchen genrell ein "ready" flag, welches man abfrage kann damit man zb weiß 
  ob UdsComServer bereit ist (auch nützlich bei tests).
  
- Heartbeat Client <-> RSD
- Heartbeat RSD <-> Plugin

- Abstraktionsplugin  Aardvark -> I²C  e.g.  aa_write  über i2c_write oder so
  - wie am besten das mapping machen ?
  
  
-python client
  -input : keyword  output: return der function (client -> rsd bis plugin und zurück)
  -oder cli 
  
  
- rsd und plugins als daemons starten

- Rsd benötigt eine Liste alle TCPWorker threads (wie im Plugin). 
    Die worker sollten allerdings nur als "zu löschen" geflaggt werden und dann durch die main loop später deleted werden.
    Nicht wie im Moment im Plugin aus dem Objekt sich selbst löschen (unsauber).
    
- alle threads bei verbindungsschließung (close) beenden 
- alle thread bei hearbeat verlust einer verbindung schließen